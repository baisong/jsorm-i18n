/**
 * @class HebrewCalendar is an object-literal that implements the necessary implementation contract for a CalendarImpl.
 * Please note that this calendar does not calculate when sunset/nightfall occurs, the time of day switching in the Hebrew
 * calendar. Thus, the Hebrew calendar can have two days for each Gregorian day: midnight (=beginning of Gregorian date) 
 * through nightfall is Hebrew day 1, and nightfall through midnight (=end of Gregorian date) is Hebrew day 2.
 * This object literal is used as the prototype for a HebrewCalendar, which is processed and created by Calendar.
 * @name JSORM.HebrewCalendar
 * @static
 */
/** @scope JSORM.HebrewCalendar.prototype */ 
{
	getName : function(){return("hebrew");},
	getStartOfDay : function(){return(JSORM.calendar.SUNSET);},
	// first date of Hebrew calendar relative to RD0
	RD0_DAYS : -1373427,
	DAYS_IN_SOLAR_YEAR : 365.25,
	MOLAD_1_OFFSET_MIDNIGHT_DAYS : 876 / (1080 * 24),
	// each molad is offset from its previous by 29d, 12h and 793parts
	MOLAD_STD_OFFSET_DAYS : 29.5 + 793/25920,
	TISHREI : 7,

	// parts (chalakim) in an hour
	parts : {
		minute : 1080 / 60,
		sec : 1080 / (60*60),
		hour : 1080,
		day : 1080 * 24,
		molad_month : 29.5*25920 + 793,
		molad_1_noon_offset : (1080*24)/2 - 876,
		molad_1_midnight_offset : 876,
		molad : 25920/2 + 793
	},

	/**
	 * Default locale is English US
	 * @private
	 */
	getDefaultLocale: function(){return('en_US');},

	/**
	 * Default locale info
	 * @private
	 */
	_defaultLocaleInfo : {
		SUNDAY : 'Sunday:Sun', MONDAY: 'Monday:Mon', TUESDAY: 'Tuesday:Tue', WEDNESDAY: 'Wednesday:Wen',
		THURSDAY: 'Thursday:Thu', FRIDAY: 'Friday:Fri', SATURDAY: 'Saturday:Sat',
		JANUARY: 'Nisan', FEBRUARY: 'Iyar', MARCH: 'Sivan', APRIL: 'Tamuz', MAY: 'Av',
		JUNE: 'Elul', JULY: 'Tishrei', AUGUST: 'Cheshvan', SEPTEMBER: 'Kislev', 
		OCTOBER: 'Tevet', NOVEMBER: 'Shevat', DECEMBER: 'Adar', UNDECIMBER: 'Adar II',
		AM: 'AM', PM: 'PM', ERA0: '', ERA1: '', COUNT0: 'th', COUNT1: 'st', COUNT2: 'nd', COUNT3: 'rd',
		COUNT21: 'st', COUNT22: 'nd', COUNT23: 'rd', COUNT31: 'st', COUNTN: 'th'
	},
	getDefaultLocaleInfo : function(key){return(this._defaultLocaleInfo[key]);},

	/**
	 * determine if a year is a leap year
	 * leaps is just a cache so we do not recalculate
	 * @private
	 */
	leaps : {},
	isLeapYear : function(y) {
		var leaps = this.leaps;
		// cache for future use to make it quicker
		if (leaps[y]===undefined) {
			leaps[y] = ((7*y+1)%19) < 7;
		}
		return(leaps[y]);
	},
	/**
	 * Special mod function. The general javascript % (mod) function will return the same sign (positive or negative) of the
	 * numerator. E.g. -1%3 = -1, while 1%3 = 1. We need a mod function that always follows the denominator, e.g. -1%3 = 1, 
	 * while 1%-3 = 1.
	 * @private
	 */
	mod : function(x,y) {return ( x - y*(Math.floor(x/y)));},

	/**
	 * Private function to return the molad day for a given month/year combination
	 * @private
	 */
	molad : function(m,y) {
		// figure out what year we are in
		//  nisan of 5760 as listed is really nisan 5761
		y = m < this.TISHREI ? y + 1 : y;
		var passedMonths = m - this.TISHREI + Math.floor((235*y - 234) / 19);
		var molad = this.RD0_DAYS - this.MOLAD_1_OFFSET_MIDNIGHT_FRACTION + passedMonths*this.MOLAD_STD_OFFSET_DAYS; 
		return(molad);
	},
	
	/**
	 * Private function to return how many days are prior to a given year
	 * @private
	 */
	daysBefore : {},
	daysBeforeYear : function(y) {
		// first see if it was cached
		var daysBefore = this.daysBefore;
		if (!daysBefore[y]) {
			// determine the day based on the months since the beginning of the calendar multiplied by the length of each month
			// ideally, day = molad(this.TISHREI,y)
			// however, this can get close to overrunning 32-bit, which many computers still operate on, so we do it separately
			var months = Math.floor((235*y-234)/19);
			var parts = this.parts.molad_1_noon_offset + this.parts.molad*months;
			var day = 29*months + Math.floor(parts/this.parts.day);
		
			// account for the fact that Rosh Hashanah cannot be Sun/Wed/Fri
			if ((3*(day+1))%7 < 3) {
				day = day+1;
			}
			daysBefore[y] = day-1;
		}
		return(daysBefore[y]);
	},
	
	/**
	 * Private function to determine how much we delay Rosh Hashanah for a given year
	 * @private
	 */
	delays : {},
	delayRoshHashanah : function(y) {
		// we need to know how many days are before last year, this year and next year
		var lastYear = this.daysBeforeYear(y-1);
		var thisYear = this.daysBeforeYear(y);
		var nextYear = this.daysBeforeYear(y+1);
	
		// by default, there is no special delay, unless this year is too long or last year is too short
		var delay = 0;
		if (nextYear - thisYear == 356) {
			// this coming year will be too long, so we delay RH two days to shorten it
			delay = 2;
		} else if (thisYear - lastYear == 382) {
			// last year was too short, so we delay RH one day to lengthen it
			delay = 1;
		}
		return(delay);
	},
	
	/**
	 * Private function to determine the RD date of Rosh Hashanah, using the days before and delay private functions
	 * @private
	 */
	rhDay : {},
	roshHashanah : function(y) {
		if (!this.rhDay[y]) {
			this.rhDay[y] = this.RD0_DAYS + this.daysBeforeYear(y) + this.delayRoshHashanah(y)+1;
		}
		return(this.rhDay[y]);
	},
	
	/**
	 * Function to return the Hebrew date of a given number of days from the RD epoch (1 January 1 CE).
	 * In Hebrew, where the day transitions at sunset rather than midnight, this will give
	 * different answers depending on the time of day. The assumption here is that the day is during normal daylight hours.
	 * To adjust for after nightfall/sunset, it must be taken into account.
	 * This function is private and is intended to be used internally only.
	 * @param {long} date the number of days since the RD 0, i.e. 1 January 1 CE
	 * @return {Object} with relevant calculated information. The keys to the object are as follows:
	 * YEAR: the year in the Hebrew calendar
	 * MONTH: the month in the given year, from 0 (Nisan) to 11 (Adar) or 12 (Adar II)
	 * DATE: the date in the given month, from 0 to 28 or 29, depending on the month
	 * DAY_OF_YEAR: the day of the given year this is, from 0 (1 Nisan) to 353-355 (regular year) or 383-385 (leap year)
	 * LEAP: if the year is a leap year, either 1 for true or 0 for false
	 * ERA: not used, always returns 0
	 * DAY_OF_WEEK: day of week of the given date, from 0 (Sunday) through 6 (Saturday)
	 * DAY_OF_WEEK_IN_MONTH: the incidence of the day of week in the given month from 1 to 5
	 * @private
	 */
	daysToCalendar : function(date) {
		// calculate the y/m/d
		
		// days between our date and epoch of Hebrew calendar
		// first calculate the approximate year. The solar year has around 365.25 days, 
		//  and since this is an estimate, that is good enough. So how many solar years have there been, approximately?
		//  the estimate can be off from -1 until +1, to start by setting it to -1
		var year = Math.floor((date - this.RD0_DAYS)/this.DAYS_IN_SOLAR_YEAR) - 1;
		// check the date of Rosh Hashanah each year from year-1 until we have a year that rosh hashanah is after our date
		while(this.roshHashanah(year+1) <= date) {
			year++;
		}
		
		// is this year a leap year?
		var leap = this.isLeapYear(year);
		
		// how many individual days are left? it is the date minus the date of Rosh Hashanah
		var priorDays = date - this.roshHashanah(year);
		
		// now figure out how many months that is by adding up each month		
		var month = 1;
		var monthDays = 0;
		var monthsInYear = this.getMaxMonth(0,year);
		var daysInMonth = this.getMaxDate(0,year,(month+monthsInYear+this.TISHREI-2)%monthsInYear+1);
		// if (number of days elapsed in prior months) plus (days in next month) <= (leftover days)
		//   then increment month, add the days in the next month, get the days for the following month
		while(monthDays + daysInMonth <= priorDays && month < monthsInYear) {
			month++;
			monthDays += daysInMonth;
			daysInMonth = this.getMaxDate(0,year,(month+monthsInYear+this.TISHREI-2)%monthsInYear+1);
			var a = daysInMonth;
		}
		// the last month is the one we wanted
		month = (month+monthsInYear+this.TISHREI-2)%monthsInYear+1;

		// now we have the year and the month. The remainder is the days in the month
		var day = priorDays - monthDays + 1;  // THIS MUST BE OFF

		// the era in the Hebrew calendar is always 0
		var era = 0;

		var cal = {ERA: era, YEAR: year, MONTH: month, DATE: day, DAY_OF_YEAR: priorDays+1, LEAP: leap?1:0};
		return(cal);
	},

	/**
	 * Function to return the number of days from the RD epoch (1 January 1 CE) to the given date.
	 * In Hebrew, where the day transitions at sunset rather than midnight, this will give
	 * different answers depending on the time of day. The assumption here is that the day is during normal daylight hours.
	 * To adjust for after nightfall/sunset, it must be taken into account.
	 * This function is private and is intended to be used internally only.
	 * @param {int} e the era in the Hebrew calendar, which is ignored, as it is meaningless
	 * @param {int} y the year in the Hebrew calendar
	 * @param {int} m the month in the given year. This is from 0 (Nisan) to 11 (Adar) or 12 (Adar II).
	 * @param {int} d the day in the given month. This is from 0 to 28 or 29, depending on the month.
	 * @return {long} number of days since the RD 0, i.e. 1 January 1 CE
	 * @private
	 */
	calendarToDays : function(e,y,m,d) {

		// first find the RD of Rosh Hashanah of the given Hebrew year
		var yearDays = this.roshHashanah(y);
		
		// next add the number of days in the months prior to the given month
		// this is not simple addition, since we start our month counting in Nisan rather than Tishrei, 
		//   which is where year counting starts
		var monthDays = 0;
		var month = 1;
		var leap = this.isLeapYear(y);
		var monthsInYear = this.getMaxMonth(0,y);
		m = (m + monthsInYear-this.TISHREI)%monthsInYear+1;
		
		for (month=1;month<m;month++) {
			monthDays = monthDays + this.getMaxDate(0,y,(month+monthsInYear+this.TISHREI-2)%monthsInYear+1);
		}
		
		// finally, add the number of days actually given and the RD of the epoch Hebrew calendar
		var fd = yearDays + monthDays + d -1;
		return(fd);
	},
	
	/**
	 * List of functions to determine the maximum or minimum allowed for a field
	 * @private
	 */
	getMaxEra : function() {return(0);},
	getMinEra : function() {return(0);},
	getMaxYear : function(era) {return(100000000000000);},
	getMinYear : function(era) {return(1);},
	getMaxMonth : function(era,year) {return(this.isLeapYear(year) ? 13 : 12);},
	getMinMonth : function(era,year) {return(1);},
	getMaxDate : function(era,year,month) {
		// even months have a maxdate of 30, except in special cases
		var maxDate = 30;
		
		/* so what are our special cases?
		 * 1) Cheshvan can have 29 or 30
		 * 2) Kislev can have 29 or 30
		 * 3) Leap year Adar has 30
		 * 4) Leap year Adar II has 29
		 */
		switch(month) {
			// Adar II
			case 13:
				maxDate = 29;
				break;
			// Adar
			case 12:
				maxDate = this.isLeapYear(year) ? 30 : 29;
				break;
			// Cheshvan
			case 8:
				// cheshvan is normally 29 (as 7%2 = 1), unless it is long
				// it is long if this year has 355 or 385 days
				var daysInYear7 = this.roshHashanah(year+1)-this.roshHashanah(year);
				maxDate = (daysInYear7 == 355 || daysInYear7 == 385) ? 30 : 29;
				break;
			// Kislev
			case 9:
				// Kislev is normally 30 (as 8%2 = 0), unless it is short
				// it is short if this year has 353 or 383 days
				var daysInYear8 = this.roshHashanah(year+1)-this.roshHashanah(year);
				maxDate = (daysInYear8 == 353 || daysInYear8 == 383) ? 29 : 30;
				break;
			// all others
			default:
				// even months have a maxdate of 29, except in special cases
				maxDate = month%2 == 0 ? 29 : 30;
				break;
		}
		
		return(maxDate);		
	},
	getMinDate : function(era,year,month) {return(1);},
	getMaxDayOfYear : function(era,year) {
		// calculate the last possible day of the year. Could be one of 353,354,355,383,384,385
		var daysInYear = this.roshHashanah(year+1)-this.roshHashanah(year);
		return(daysInYear);		
	},
	getMinDayOfYear : function(era,year) {return(1);}
}
